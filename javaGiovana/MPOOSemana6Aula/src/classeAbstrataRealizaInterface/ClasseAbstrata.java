package classeAbstrataRealizaInterface;

public abstract class ClasseAbstrata implements Interface {

	
	// PODE GERAR ALGUNS PROBLEMAS DE PROGRAMAÇÃO
	
	// DUPLICIDADE DE CÓDIGO
	// SOLUÇÃO 1: SE O COMPORTAMENTO É COMUM A TODOS, DEIXA O COMPORTAMENTO @Override NA SUPERCLASSE
	// SOLUÇÃO 2: SE É COMUM PARA TODOS, COLOCAR COMO DEFAULT NA INTERFACE (NÃO TEM MAIS @Override)
	// SOLUÇÃO 3 : USO DE DESIGN PATTERN - Strategy
	
	// SE NÃO FOR:
	// SOLUÇÃO 2 : DEIXA O COMPORTAMENTO @Override NA SUPERCLASSE E @Override DE NOVO NA ESPECIALIZAÇÃO QUE PRECISAR MODIFICAR
	
	//  INTERFACE NÃO ADMITE INSTÂNCIAS
	
	// NÃO TEM ACESSO AO CÓDIGO? FAZ UMA CLASSE QUE EXTENDS A OUTRA
	
	// GerenteInterface gerenteInterface = new GerenteClass(); GerenteClass é concreto
	
	// EM JAVA É POSSÍVEL FAZER A HERENÇA MÚLTIPLA DE INTERFACE
	
	// INTERFACE PODE SER MUITO UTILIZADA PARA DEFINIÇÃO DE PERFIS A PARTIR DE CODIFIÇÃO EXISTENTE

	// "EM JAVA PODEMOS UTILIZAR INTERFACE PARA IMPLEMENTAR HERENÇA MULTIPLA" - ERRADO!!
	
	// SÓ PODEMOS FAZER HENRAÇA MULTIPLA DE CONSTANTES E COMPORTAMENTOS (implements)
	
	//EM INTERFACE Abstrect exige @Override e tem que ser utilizado por instâncias
	
	// EM INTERFACE DEFAULT Sem @Override e tem que ser utilizado por instâncias
	
	// SE É STATIC PERTENCE A CLASSE, SEM @Override e É UTILIZADO PELA CLASSE
	
	
}
